version: '3.9'

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${PG_PORT}:5432"          # <- différent staging vs prod
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-admin} -d ${DB_NAME:-course_db}"]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.3
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "${ES_PORT}:9200"          # <- 9201 en staging, 9200 en prod
    volumes:
      - es_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS 'http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=50s' | grep -q '\"status\":\"'"]
      interval: 5s
      timeout: 5s
      retries: 30
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.14.3
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "${KIBANA_PORT}:5601"      # <- 5602 en staging, 5601 en prod
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped

  backend:
    image: ghcr.io/koubaahm/learning-platform-backend:${IMAGE_TAG:-latest}
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    environment:
      # L’app écoute sur APP_PORT (env Spring Boot: SERVER_PORT)
      SERVER_PORT: ${APP_PORT}
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: none
      SPRING_ELASTICSEARCH_URIS: http://elasticsearch:9200
      APP_SEARCH_INDEX_PREFIX: ${APP_SEARCH_INDEX_PREFIX:-lp}
    ports:
      - "${BACKEND_PORT}:${APP_PORT}"
    healthcheck:
      # Vérifie explicitement le "status":"UP"
      test: ["CMD-SHELL", "curl -fsS http://localhost:${APP_PORT}/actuator/health | grep -q '\"status\":\"UP\"' || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 60        # jusqu’à 5 min
      start_period: 60s  # laisse 60s avant de compter les échecs
    restart: unless-stopped

  frontend:
    image: ghcr.io/koubaahm/learning-platform-frontend:${IMAGE_TAG:-latest}
    ports:
      - "${FRONTEND_PORT}:80"
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
  es_data: