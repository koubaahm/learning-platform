name: CI/CD - Learning Platform

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_BACKEND: ghcr.io/koubaahm/learning-platform-backend
  IMAGE_FRONTEND: ghcr.io/koubaahm/learning-platform-frontend

jobs:
 
  # 1) CI - Build & Push Images

  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven  

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Backend build
      - name: Build backend image
        run: |
          cd course-service
          chmod +x mvnw || true
          ./mvnw -B -U -DskipTests clean package
          docker build -t $IMAGE_BACKEND:${{ github.sha }} .

      # Frontend build
      - name: Build frontend image
        run: |
          cd frontend
          docker build -t $IMAGE_FRONTEND:${{ github.sha }} .

      # Push images
      - name: Push images
        run: |
          docker push $IMAGE_BACKEND:${{ github.sha }}
          docker push $IMAGE_FRONTEND:${{ github.sha }}

  
  # 2) CD - Deploy sur VM
  
  deploy:
    runs-on: self-hosted
    needs: build
    environment:
      name: production
      url: http://localhost:8080
    steps:
      - name: Pull latest code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Update images & restart stack
        run: |
          export IMAGE_BACKEND=$IMAGE_BACKEND
          export IMAGE_FRONTEND=$IMAGE_FRONTEND
          export TAG=${{ github.sha }}
          docker compose -f docker-compose.yml pull
          docker compose -f docker-compose.yml up -d

      - name: Run DB migrations (Flyway)
        run: |
          docker exec course-service java -jar /app/app.jar \
            -Dspring.flyway.enabled=true \
            -Dspring.flyway.locations=classpath:db/migration

      - name: Health check backend
        run: |
          for i in {1..40}; do
            if curl -fsS http://localhost:8080/actuator/health; then
              exit 0
            fi
            echo "Waiting backend..."
            sleep 3
          done
          echo "Backend not healthy!"
          exit 1