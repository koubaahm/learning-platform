name: CD - Prod

permissions:
  contents: read
  packages: read

on:
  workflow_dispatch:
    inputs:
      ref:
        description: "Ref à déployer (ex: main ou v1.0.7)"
        required: true
        default: "main"

jobs:
  deploy-prod:
    runs-on: self-hosted
    env:
      TAG: ${{ inputs.ref }}

    steps:
      - name: Checkout repo at ref
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}     # <-- valide pour Git

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Load .env (for image names)
        run: |
          set -e
          # exporte les variables du .env vers l'environnement de step
          export $(grep -v '^#' .env | xargs -d '\n') || true
          echo "IMAGE_BACKEND=$IMAGE_BACKEND" >> $GITHUB_ENV
          echo "IMAGE_FRONTEND=$IMAGE_FRONTEND" >> $GITHUB_ENV

      - name: Preflight — verify images exist
        run: |
          set -e
          for IMG in "$IMAGE_BACKEND" "$IMAGE_FRONTEND"; do
            docker manifest inspect ${IMG}:${TAG} >/dev/null || {
              echo "::error ::Image not found: ${IMG}:${TAG}"
              exit 1
            }
          done

      - name: Pull & deploy
        run: |
          set -euo pipefail
          docker compose -p lp-prod --env-file .env down --remove-orphans || true
          # override TAG dans l'env runtime compose
          TAG=${TAG} docker compose -p lp-prod --env-file .env pull
          TAG=${TAG} docker compose -p lp-prod --env-file .env up -d --wait --wait-timeout 300
          docker compose -p lp-prod --env-file .env ps

      - name: Health probe
        run: |
          curl -fsS http://localhost:8080/actuator/health