name: CD - Staging

permissions:
  contents: read
  packages: read

on:
  workflow_run:
    workflows: ["CI"]
    types: [completed]

concurrency:
  group: deploy-staging
  cancel-in-progress: true

jobs:
  deploy-staging:
    # Ne déploie que si la CI a réussi sur la branche main
    if: >
      ${{
        github.event.workflow_run.conclusion == 'success' &&
        github.event.workflow_run.head_branch == 'main'
      }}
    runs-on: self-hosted
    environment:
      name: staging
      url: http://localhost:8081
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull & deploy (staging stack)
        run: |
          IMAGE_TAG="${{ github.event.workflow_run.head_sha }}" docker compose -p lp-staging --env-file .env.staging pull
          IMAGE_TAG="${{ github.event.workflow_run.head_sha }}" docker compose -p lp-staging --env-file .env.staging up -d --wait --wait-timeout 300
          docker compose -p lp-staging --env-file .env.staging ps

      - name: Quick health probe (host-level)
        run: |
          # Adapte le port si besoin (doit matcher BACKEND_PORT dans .env.staging)
          curl -fsS http://localhost:8081/actuator/health || {
            echo "Backend not healthy (host-level)";
            docker compose -p lp-staging --env-file .env.staging logs backend;
            exit 1;
          }